{
  "css.validate": true,
  "scss.validate": true,
  "less.validate": true,
  "[javascript]": {
    "editor.formatOnSave": false
  },
  "prettier.disableLanguages": [
    "js"
  ],
  "editor.formatOnSave": true,
  "cSpell.words": [
    "deckit",
    "formik",
    "hygge",
    "scroller"
  ],
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "search.exclude": {
    "**/node_modules": true,
    "**/build": true,
    "**/bower_components": true,
    "**/*.code-search": true,
    "**/package-lock.json": true,
    "**/package.json": true
  },
  "folderTemplates.structures": [
    {
      "name": "ReactStyled",
      "omitParentDirectory": false,
      "structure": [
        {
          "fileName": "I<FTName>.ts",
          "template": "Interface"
        }
        {
          "fileName": "<FTName>.tsx",
          "template": "ReactComponentWithStyled"
        },
        {
          "fileName": "<FTName>.styled.ts",
          "template": "Styled"
        },
        {
          "fileName": "<FTName>.stories.tsx",
          "template": "Story"
        }
      ]
    },
    {
      "name": "Store",
      "customVariables": [],
      "structure": [
        {
          "fileName": "<FTName>Actions.js",
          "template": "Store-templateActions.js"
        },
        {
          "fileName": "<FTName>Reducer.js",
          "template": "Store-templateReducer.js"
        },
        {
          "fileName": "<FTName>Selectors.js",
          "template": "Store-templateSelectors.js"
        }
      ]
    }
  ],
  "folderTemplates.fileTemplates": {
    "Interface": [
      "export default interface I<FTName> {",
      "  children?: React.ReactNode;",
      "}",
      ""
    ],
    "Story": [
      "import { Story, Meta } from '@storybook/react';",
      "",
      "import I<FTName> from 'components/<FTName>/I<FTName>';",
      "import <FTName>Component from './<FTName>';",
      "",
      "export default {",
      "  title: 'Components/<FTName>',",
      "  component: <FTName>Component,",
      "} as Meta;",
      "",
      "const Template: Story<I<FTName>> = (args) => <<FTName>Component {...args} />;",
      "",
      "export const <FTName> = Template.bind({});",
      "",
      "<FTName>.args = {",
      "  children: '<FTName>',",
      "};",
      "",
    ],
    "ReactComponentWithStyled": [
      "import I<FTName> from 'components/<FTName>/I<FTName>';",
      "import * as Styled from './<FTName>.styled';",
      "",
      "const <FTName> = ({",
      "  children = 'Default',",
      "}: I<FTName>): JSX.Element => <Styled.<FTName>>{children}</Styled.<FTName>>;",
      "",
      "export default <FTName>;",
      "",
    ],
    "Styled": [
      "import styled from 'styled-components';",
      "",
      "export const <FTName> = styled.div`",
      "  background: yellow;",
      "`;",
      "",
    ],
    "Store-templateActions.js": [
      "export const CREATE_TEMPLATE = `CREATE_TEMPLATE`;",
      "\r",
      "export const create<FTName> = () => {",
      "  return {",
      "    type: CREATE_TEMPLATE",
      "  };",
      "};",
      ""
    ],
    "Store-templateReducer.js": [
      "import produce from \"immer\";",
      "import { CREATE_TEMPLATE } from \"store/<FTName>/<FTName>Actions\";",
      "\r",
      "export const initialState = {",
      "  id: null",
      "};",
      "\r",
      "const <FTName>Function = (items, newItem) => {",
      "  return items;",
      "};",
      "\r",
      "export const <FTName>Reducer = produce(",
      "  (draft = initialState, { type, payload }) => {",
      "    switch (type) {",
      "      case CREATE_TEMPLATE:",
      "        draft.id = <FTName>Function(draft.items, payload);",
      "        return draft;",
      "      default:",
      "        return draft;",
      "    }",
      "  }",
      ");",
      ""
    ],
    "Store-templateSelectors.js": [
      "import { createSelector } from \"reselect\";",
      "import { initialState } from \"store/<FTName>/<FTName>Reducer\";",
      "\r",
      "const <FTName>Selector = state => state.<FTName>;",
      "\r",
      "export const id = createSelector(",
      "  <FTName>Selector,",
      "  ({ id = initialState.id }) => id",
      ");",
      ""
    ]
  },
}